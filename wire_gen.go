// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"api_crud/controllers"
	"api_crud/db"
	"api_crud/repository"
	"api_crud/usecases"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeApplication() (*fiber.App, error) {
	db, err := InitializeDB()
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(db)
	userUsecase := usecases.NewUserUsecase(userRepository)
	userController := controllers.NewUserController(userUsecase)
	profileRepository := repository.NewProfileRepository(db)
	profileUsecase := usecases.NewProfileUsecase(profileRepository)
	profileController := controllers.NewProfileController(profileUsecase)
	app := NewApp(userRepository, userController, profileController)
	return app, nil
}

// wire.go:

func InitializeDB() (*gorm.DB, error) {
	connection, err := db.ConnectDB("root:password@tcp(127.0.0.1:3306)/db_api_crud?charset=utf8mb4&parseTime=True&loc=Local")
	if err != nil {
		return nil, err
	}

	return connection, nil
}

var RepositorySet = wire.NewSet(repository.NewUserRepository, repository.NewProfileRepository)

var UsecaseSet = wire.NewSet(usecases.NewUserUsecase, usecases.NewProfileUsecase)

var ControllerSet = wire.NewSet(controllers.NewUserController, controllers.NewProfileController)

func NewApp(userRepository repository.UserRepository, userController *controllers.UserController, profileController *controllers.ProfileController) *fiber.App {
	app := fiber.New()
	SetupRoutes(app, userRepository, userController, profileController)
	return app
}
